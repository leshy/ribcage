// Generated by CoffeeScript 1.9.3
(function() {
  var CoffeeScript, LiveScript, _, async, backbone, colors, fs, h, lego, loadSettings, path, util;

  path = require('path');

  async = require('async');

  backbone = require('backbone4000');

  colors = require('colors');

  _ = require('underscore');

  h = require('helpers');

  lego = require('lego');

  fs = require('fs');

  util = require('util');

  LiveScript = require('LiveScript');

  CoffeeScript = require('coffeescript');

  exports.init = function(env, callback) {
    var getVersion, loadLegos, remPw, rootCandidates, rootDir;
    if (env == null) {
      env = {};
    }
    _.extend(env, {});
    rootCandidates = [path.dirname(require.main.filename), process.cwd()];
    rootDir = _.find(rootCandidates, function(dir) {
      return fs.existsSync(path.join(dir, 'node_modules'));
    });
    env.root = rootDir;
    env.settings = loadSettings(env.root, env.settings);
    if (env.settings.verboseInit) {
      remPw = h.depthFirst(env.settings, {}, function(val, key) {
        if (h.strHas(key, 'key', 'sign', 'pass', 'secret', 'login')) {
          return h.uuid(15 + h.randomInt(15));
        } else {
          return val;
        }
      });
      console.log(util.inspect(remPw, {
        colors: true,
        depth: 4
      }));
    }
    getVersion = function(callback) {
      var gitrev;
      gitrev = require('git-rev');
      return gitrev.short(function(str) {
        env.version = str;
        return callback();
      });
    };
    loadLegos = function(callback) {
      return lego.loadLegos({
        verbose: env.settings.verboseInit,
        dir: env.settings.rootDir || h.path(env.root, 'node_modules'),
        prefix: 'ribcage_',
        env: env
      }, callback);
    };
    return async.series([getVersion, loadLegos], function(err, data) {
      if (process.env.NODE_ENV === "production") {
        env.env = "prod";
      } else {
        env.env = "dev";
      }
      return callback(err, env);
    });
  };

  loadSettings = function(folder, settings) {
    var fileSettings, settingsFile;
    if (settings == null) {
      settings = {};
    }
    settingsFile = h.path(folder, 'settings');
    if (fs.existsSync(settingsFile + ".js") || fs.existsSync(settingsFile + ".ls") || fs.existsSync(settingsFile + ".coffee")) {
      fileSettings = require(settingsFile);
      if (fileSettings.settings != null) {
        fileSettings = fileSettings.settings;
      }
      settings = h.extend(settings, fileSettings);
    }
    return settings;
  };

}).call(this);
